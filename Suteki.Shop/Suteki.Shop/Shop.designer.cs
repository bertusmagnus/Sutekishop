#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Suteki.Shop
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SutekiShop")]
	public partial class ShopDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertBasketItem(BasketItem instance);
    partial void UpdateBasketItem(BasketItem instance);
    partial void DeleteBasketItem(BasketItem instance);
    partial void InsertCardType(CardType instance);
    partial void UpdateCardType(CardType instance);
    partial void DeleteCardType(CardType instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertPostage(Postage instance);
    partial void UpdatePostage(Postage instance);
    partial void DeletePostage(Postage instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertPostZone(PostZone instance);
    partial void UpdatePostZone(PostZone instance);
    partial void DeletePostZone(PostZone instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertBasket(Basket instance);
    partial void UpdateBasket(Basket instance);
    partial void DeleteBasket(Basket instance);
    #endregion
		
		public ShopDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SutekiShopConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShopDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<BasketItem> BasketItems
		{
			get
			{
				return this.GetTable<BasketItem>();
			}
		}
		
		public System.Data.Linq.Table<CardType> CardTypes
		{
			get
			{
				return this.GetTable<CardType>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<Postage> Postages
		{
			get
			{
				return this.GetTable<Postage>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<PostZone> PostZones
		{
			get
			{
				return this.GetTable<PostZone>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Basket> Baskets
		{
			get
			{
				return this.GetTable<Basket>();
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Email;
		
		private string _Password;
		
		private int _RoleId;
		
		private bool _IsEnabled;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Basket> _Baskets;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public User()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Baskets = new EntitySet<Basket>(new Action<Basket>(this.attach_Baskets), new Action<Basket>(this.detach_Baskets));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="User_Order", Storage="_Orders", OtherKey="UserId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="User_Basket", Storage="_Baskets", OtherKey="UserId")]
		public EntitySet<Basket> Baskets
		{
			get
			{
				return this._Baskets;
			}
			set
			{
				this._Baskets.Assign(value);
			}
		}
		
		[Association(Name="Role_User", Storage="_Role", ThisKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Baskets(Basket entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Baskets(Basket entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private System.Guid _FileName;
		
		private string _Description;
		
		private EntitySet<ProductImage> _ProductImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnFileNameChanging(System.Guid value);
    partial void OnFileNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Image()
		{
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			OnCreated();
		}
		
		[Column(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Image_ProductImage", Storage="_ProductImages", OtherKey="ImageId")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[Table(Name="dbo.BasketItem")]
	public partial class BasketItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasketItemId;
		
		private int _BasketId;
		
		private int _SizeId;
		
		private int _Quantity;
		
		private EntityRef<Size> _Size;
		
		private EntityRef<Basket> _Basket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasketItemIdChanging(int value);
    partial void OnBasketItemIdChanged();
    partial void OnBasketIdChanging(int value);
    partial void OnBasketIdChanged();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public BasketItem()
		{
			this._Size = default(EntityRef<Size>);
			this._Basket = default(EntityRef<Basket>);
			OnCreated();
		}
		
		[Column(Storage="_BasketItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasketItemId
		{
			get
			{
				return this._BasketItemId;
			}
			set
			{
				if ((this._BasketItemId != value))
				{
					this.OnBasketItemIdChanging(value);
					this.SendPropertyChanging();
					this._BasketItemId = value;
					this.SendPropertyChanged("BasketItemId");
					this.OnBasketItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_BasketId", DbType="Int NOT NULL")]
		public int BasketId
		{
			get
			{
				return this._BasketId;
			}
			set
			{
				if ((this._BasketId != value))
				{
					if (this._Basket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBasketIdChanging(value);
					this.SendPropertyChanging();
					this._BasketId = value;
					this.SendPropertyChanged("BasketId");
					this.OnBasketIdChanged();
				}
			}
		}
		
		[Column(Storage="_SizeId", DbType="Int NOT NULL")]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="Size_BasketItem", Storage="_Size", ThisKey="SizeId", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.BasketItems.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.BasketItems.Add(this);
						this._SizeId = value.SizeId;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		[Association(Name="Basket_BasketItem", Storage="_Basket", ThisKey="BasketId", IsForeignKey=true)]
		public Basket Basket
		{
			get
			{
				return this._Basket.Entity;
			}
			set
			{
				Basket previousValue = this._Basket.Entity;
				if (((previousValue != value) 
							|| (this._Basket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Basket.Entity = null;
						previousValue.BasketItems.Remove(this);
					}
					this._Basket.Entity = value;
					if ((value != null))
					{
						value.BasketItems.Add(this);
						this._BasketId = value.BasketId;
					}
					else
					{
						this._BasketId = default(int);
					}
					this.SendPropertyChanged("Basket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CardType")]
	public partial class CardType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardTypeId;
		
		private string _Name;
		
		private bool _RequiredIssueNumber;
		
		private EntitySet<Card> _Cards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardTypeIdChanging(int value);
    partial void OnCardTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRequiredIssueNumberChanging(bool value);
    partial void OnRequiredIssueNumberChanged();
    #endregion
		
		public CardType()
		{
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			OnCreated();
		}
		
		[Column(Storage="_CardTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardTypeId
		{
			get
			{
				return this._CardTypeId;
			}
			set
			{
				if ((this._CardTypeId != value))
				{
					this.OnCardTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CardTypeId = value;
					this.SendPropertyChanged("CardTypeId");
					this.OnCardTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredIssueNumber", DbType="Bit NOT NULL")]
		public bool RequiredIssueNumber
		{
			get
			{
				return this._RequiredIssueNumber;
			}
			set
			{
				if ((this._RequiredIssueNumber != value))
				{
					this.OnRequiredIssueNumberChanging(value);
					this.SendPropertyChanging();
					this._RequiredIssueNumber = value;
					this.SendPropertyChanged("RequiredIssueNumber");
					this.OnRequiredIssueNumberChanged();
				}
			}
		}
		
		[Association(Name="CardType_Card", Storage="_Cards", OtherKey="CardTypeId")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.CardType = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.CardType = null;
		}
	}
	
	[Table(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactId;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _Town;
		
		private string _County;
		
		private string _Postcode;
		
		private int _CountryId;
		
		private string _Telephone;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    #endregion
		
		public Contact()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ContactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[Column(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_Address3", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[Column(Storage="_Town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[Column(Storage="_County", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[Column(Storage="_Postcode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[Association(Name="Contact_Order", Storage="_Orders", OtherKey="CardContactId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Contact_Order1", Storage="_Orders1", OtherKey="DeliveryContactId")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		[Association(Name="Country_Contact", Storage="_Country", ThisKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
	}
	
	[Table(Name="dbo.Card")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardId;
		
		private int _CardTypeId;
		
		private string _Holder;
		
		private string _Number;
		
		private int _ExpiryMonth;
		
		private int _ExpiryYear;
		
		private int _StartMonth;
		
		private int _StartYear;
		
		private string _IssueNumber;
		
		private string _SecurityCode;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<CardType> _CardType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardIdChanging(int value);
    partial void OnCardIdChanged();
    partial void OnCardTypeIdChanging(int value);
    partial void OnCardTypeIdChanged();
    partial void OnHolderChanging(string value);
    partial void OnHolderChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnExpiryMonthChanging(int value);
    partial void OnExpiryMonthChanged();
    partial void OnExpiryYearChanging(int value);
    partial void OnExpiryYearChanged();
    partial void OnStartMonthChanging(int value);
    partial void OnStartMonthChanged();
    partial void OnStartYearChanging(int value);
    partial void OnStartYearChanged();
    partial void OnIssueNumberChanging(string value);
    partial void OnIssueNumberChanged();
    partial void OnSecurityCodeChanging(string value);
    partial void OnSecurityCodeChanged();
    #endregion
		
		public Card()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._CardType = default(EntityRef<CardType>);
			OnCreated();
		}
		
		[Column(Storage="_CardId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[Column(Storage="_CardTypeId", DbType="Int NOT NULL")]
		public int CardTypeId
		{
			get
			{
				return this._CardTypeId;
			}
			set
			{
				if ((this._CardTypeId != value))
				{
					if (this._CardType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CardTypeId = value;
					this.SendPropertyChanged("CardTypeId");
					this.OnCardTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Holder", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Holder
		{
			get
			{
				return this._Holder;
			}
			set
			{
				if ((this._Holder != value))
				{
					this.OnHolderChanging(value);
					this.SendPropertyChanging();
					this._Holder = value;
					this.SendPropertyChanged("Holder");
					this.OnHolderChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiryMonth", DbType="Int NOT NULL")]
		public int ExpiryMonth
		{
			get
			{
				return this._ExpiryMonth;
			}
			set
			{
				if ((this._ExpiryMonth != value))
				{
					this.OnExpiryMonthChanging(value);
					this.SendPropertyChanging();
					this._ExpiryMonth = value;
					this.SendPropertyChanged("ExpiryMonth");
					this.OnExpiryMonthChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiryYear", DbType="Int NOT NULL")]
		public int ExpiryYear
		{
			get
			{
				return this._ExpiryYear;
			}
			set
			{
				if ((this._ExpiryYear != value))
				{
					this.OnExpiryYearChanging(value);
					this.SendPropertyChanging();
					this._ExpiryYear = value;
					this.SendPropertyChanged("ExpiryYear");
					this.OnExpiryYearChanged();
				}
			}
		}
		
		[Column(Storage="_StartMonth", DbType="Int NOT NULL")]
		public int StartMonth
		{
			get
			{
				return this._StartMonth;
			}
			set
			{
				if ((this._StartMonth != value))
				{
					this.OnStartMonthChanging(value);
					this.SendPropertyChanging();
					this._StartMonth = value;
					this.SendPropertyChanged("StartMonth");
					this.OnStartMonthChanged();
				}
			}
		}
		
		[Column(Storage="_StartYear", DbType="Int NOT NULL")]
		public int StartYear
		{
			get
			{
				return this._StartYear;
			}
			set
			{
				if ((this._StartYear != value))
				{
					this.OnStartYearChanging(value);
					this.SendPropertyChanging();
					this._StartYear = value;
					this.SendPropertyChanged("StartYear");
					this.OnStartYearChanged();
				}
			}
		}
		
		[Column(Storage="_IssueNumber", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string IssueNumber
		{
			get
			{
				return this._IssueNumber;
			}
			set
			{
				if ((this._IssueNumber != value))
				{
					this.OnIssueNumberChanging(value);
					this.SendPropertyChanging();
					this._IssueNumber = value;
					this.SendPropertyChanged("IssueNumber");
					this.OnIssueNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string SecurityCode
		{
			get
			{
				return this._SecurityCode;
			}
			set
			{
				if ((this._SecurityCode != value))
				{
					this.OnSecurityCodeChanging(value);
					this.SendPropertyChanging();
					this._SecurityCode = value;
					this.SendPropertyChanged("SecurityCode");
					this.OnSecurityCodeChanged();
				}
			}
		}
		
		[Association(Name="Card_Order", Storage="_Orders", OtherKey="CardId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="CardType_Card", Storage="_CardType", ThisKey="CardTypeId", IsForeignKey=true)]
		public CardType CardType
		{
			get
			{
				return this._CardType.Entity;
			}
			set
			{
				CardType previousValue = this._CardType.Entity;
				if (((previousValue != value) 
							|| (this._CardType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardType.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._CardType.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._CardTypeId = value.CardTypeId;
					}
					else
					{
						this._CardTypeId = default(int);
					}
					this.SendPropertyChanged("CardType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[Table(Name="dbo.Postage")]
	public partial class Postage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostageId;
		
		private string _Name;
		
		private int _MaxWeight;
		
		private decimal _Price;
		
		private int _Position;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostageIdChanging(int value);
    partial void OnPostageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxWeightChanging(int value);
    partial void OnMaxWeightChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Postage()
		{
			OnCreated();
		}
		
		[Column(Storage="_PostageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostageId
		{
			get
			{
				return this._PostageId;
			}
			set
			{
				if ((this._PostageId != value))
				{
					this.OnPostageIdChanging(value);
					this.SendPropertyChanging();
					this._PostageId = value;
					this.SendPropertyChanged("PostageId");
					this.OnPostageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaxWeight", DbType="Int NOT NULL")]
		public int MaxWeight
		{
			get
			{
				return this._MaxWeight;
			}
			set
			{
				if ((this._MaxWeight != value))
				{
					this.OnMaxWeightChanging(value);
					this.SendPropertyChanging();
					this._MaxWeight = value;
					this.SendPropertyChanged("MaxWeight");
					this.OnMaxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Role_User", Storage="_Users", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Name;
		
		private int _Position;
		
		private bool _IsActive;
		
		private int _PostZoneId;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<Basket> _Baskets;
		
		private EntityRef<PostZone> _PostZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPostZoneIdChanging(int value);
    partial void OnPostZoneIdChanged();
    #endregion
		
		public Country()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Baskets = new EntitySet<Basket>(new Action<Basket>(this.attach_Baskets), new Action<Basket>(this.detach_Baskets));
			this._PostZone = default(EntityRef<PostZone>);
			OnCreated();
		}
		
		[Column(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_PostZoneId", DbType="Int NOT NULL")]
		public int PostZoneId
		{
			get
			{
				return this._PostZoneId;
			}
			set
			{
				if ((this._PostZoneId != value))
				{
					if (this._PostZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostZoneIdChanging(value);
					this.SendPropertyChanging();
					this._PostZoneId = value;
					this.SendPropertyChanged("PostZoneId");
					this.OnPostZoneIdChanged();
				}
			}
		}
		
		[Association(Name="Country_Contact", Storage="_Contacts", OtherKey="CountryId")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="Country_Basket", Storage="_Baskets", OtherKey="CountryId")]
		public EntitySet<Basket> Baskets
		{
			get
			{
				return this._Baskets;
			}
			set
			{
				this._Baskets.Assign(value);
			}
		}
		
		[Association(Name="PostZone_Country", Storage="_PostZone", ThisKey="PostZoneId", IsForeignKey=true)]
		public PostZone PostZone
		{
			get
			{
				return this._PostZone.Entity;
			}
			set
			{
				PostZone previousValue = this._PostZone.Entity;
				if (((previousValue != value) 
							|| (this._PostZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostZone.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._PostZone.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._PostZoneId = value.PostZoneId;
					}
					else
					{
						this._PostZoneId = default(int);
					}
					this.SendPropertyChanged("PostZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Baskets(Basket entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Baskets(Basket entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusId;
		
		private string _Name;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIdChanging(int value);
    partial void OnOrderStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_OrderStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_Orders", OtherKey="OrderStatusId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[Table(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _BasketId;
		
		private System.Nullable<int> _CardId;
		
		private int _CardContactId;
		
		private System.Nullable<int> _DeliveryContactId;
		
		private string _Email;
		
		private string _AdditionalInformation;
		
		private bool _UseCardHolderContact;
		
		private bool _PayByTelephone;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _DispatchedDate;
		
		private int _OrderStatusId;
		
		private System.Nullable<int> _UserId;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<User> _User;
		
		private EntityRef<Basket> _Basket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnBasketIdChanging(int value);
    partial void OnBasketIdChanged();
    partial void OnCardIdChanging(System.Nullable<int> value);
    partial void OnCardIdChanged();
    partial void OnCardContactIdChanging(int value);
    partial void OnCardContactIdChanged();
    partial void OnDeliveryContactIdChanging(System.Nullable<int> value);
    partial void OnDeliveryContactIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAdditionalInformationChanging(string value);
    partial void OnAdditionalInformationChanged();
    partial void OnUseCardHolderContactChanging(bool value);
    partial void OnUseCardHolderContactChanged();
    partial void OnPayByTelephoneChanging(bool value);
    partial void OnPayByTelephoneChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDispatchedDateChanging(System.DateTime value);
    partial void OnDispatchedDateChanged();
    partial void OnOrderStatusIdChanging(int value);
    partial void OnOrderStatusIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public Order()
		{
			this._Card = default(EntityRef<Card>);
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._User = default(EntityRef<User>);
			this._Basket = default(EntityRef<Basket>);
			OnCreated();
		}
		
		[Column(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_BasketId", DbType="Int NOT NULL")]
		public int BasketId
		{
			get
			{
				return this._BasketId;
			}
			set
			{
				if ((this._BasketId != value))
				{
					if (this._Basket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBasketIdChanging(value);
					this.SendPropertyChanging();
					this._BasketId = value;
					this.SendPropertyChanged("BasketId");
					this.OnBasketIdChanged();
				}
			}
		}
		
		[Column(Storage="_CardId", DbType="Int")]
		public System.Nullable<int> CardId
		{
			get
			{
				return this._CardId;
			}
			set
			{
				if ((this._CardId != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIdChanging(value);
					this.SendPropertyChanging();
					this._CardId = value;
					this.SendPropertyChanged("CardId");
					this.OnCardIdChanged();
				}
			}
		}
		
		[Column(Storage="_CardContactId", DbType="Int NOT NULL")]
		public int CardContactId
		{
			get
			{
				return this._CardContactId;
			}
			set
			{
				if ((this._CardContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardContactIdChanging(value);
					this.SendPropertyChanging();
					this._CardContactId = value;
					this.SendPropertyChanged("CardContactId");
					this.OnCardContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryContactId", DbType="Int")]
		public System.Nullable<int> DeliveryContactId
		{
			get
			{
				return this._DeliveryContactId;
			}
			set
			{
				if ((this._DeliveryContactId != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryContactIdChanging(value);
					this.SendPropertyChanging();
					this._DeliveryContactId = value;
					this.SendPropertyChanged("DeliveryContactId");
					this.OnDeliveryContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalInformation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AdditionalInformation
		{
			get
			{
				return this._AdditionalInformation;
			}
			set
			{
				if ((this._AdditionalInformation != value))
				{
					this.OnAdditionalInformationChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInformation = value;
					this.SendPropertyChanged("AdditionalInformation");
					this.OnAdditionalInformationChanged();
				}
			}
		}
		
		[Column(Storage="_UseCardHolderContact", DbType="Bit NOT NULL")]
		public bool UseCardHolderContact
		{
			get
			{
				return this._UseCardHolderContact;
			}
			set
			{
				if ((this._UseCardHolderContact != value))
				{
					this.OnUseCardHolderContactChanging(value);
					this.SendPropertyChanging();
					this._UseCardHolderContact = value;
					this.SendPropertyChanged("UseCardHolderContact");
					this.OnUseCardHolderContactChanged();
				}
			}
		}
		
		[Column(Storage="_PayByTelephone", DbType="Bit NOT NULL")]
		public bool PayByTelephone
		{
			get
			{
				return this._PayByTelephone;
			}
			set
			{
				if ((this._PayByTelephone != value))
				{
					this.OnPayByTelephoneChanging(value);
					this.SendPropertyChanging();
					this._PayByTelephone = value;
					this.SendPropertyChanged("PayByTelephone");
					this.OnPayByTelephoneChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DispatchedDate", DbType="DateTime NOT NULL")]
		public System.DateTime DispatchedDate
		{
			get
			{
				return this._DispatchedDate;
			}
			set
			{
				if ((this._DispatchedDate != value))
				{
					this.OnDispatchedDateChanging(value);
					this.SendPropertyChanging();
					this._DispatchedDate = value;
					this.SendPropertyChanged("DispatchedDate");
					this.OnDispatchedDateChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusId", DbType="Int NOT NULL")]
		public int OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="Card_Order", Storage="_Card", ThisKey="CardId", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CardId = value.CardId;
					}
					else
					{
						this._CardId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[Association(Name="Contact_Order", Storage="_Contact", ThisKey="CardContactId", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CardContactId = value.ContactId;
					}
					else
					{
						this._CardContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="Contact_Order1", Storage="_Contact1", ThisKey="DeliveryContactId", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._DeliveryContactId = value.ContactId;
					}
					else
					{
						this._DeliveryContactId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="OrderStatusId", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusId = value.OrderStatusId;
					}
					else
					{
						this._OrderStatusId = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[Association(Name="User_Order", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Basket_Order", Storage="_Basket", ThisKey="BasketId", IsForeignKey=true)]
		public Basket Basket
		{
			get
			{
				return this._Basket.Entity;
			}
			set
			{
				Basket previousValue = this._Basket.Entity;
				if (((previousValue != value) 
							|| (this._Basket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Basket.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Basket.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._BasketId = value.BasketId;
					}
					else
					{
						this._BasketId = default(int);
					}
					this.SendPropertyChanged("Basket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductImage")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductImageId;
		
		private int _ProductId;
		
		private int _ImageId;
		
		private int _Position;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIdChanging(int value);
    partial void OnProductImageIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    #endregion
		
		public ProductImage()
		{
			this._Image = default(EntityRef<Image>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductImageId
		{
			get
			{
				return this._ProductImageId;
			}
			set
			{
				if ((this._ProductImageId != value))
				{
					this.OnProductImageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductImageId = value;
					this.SendPropertyChanged("ProductImageId");
					this.OnProductImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ImageId", DbType="Int NOT NULL")]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Association(Name="Image_ProductImage", Storage="_Image", ThisKey="ImageId", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ImageId = value.ImageId;
					}
					else
					{
						this._ImageId = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_Product", ThisKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PostZone")]
	public partial class PostZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostZoneId;
		
		private string _Name;
		
		private decimal _Multiplier;
		
		private bool _AskIfMaxWeight;
		
		private int _Position;
		
		private bool _IsActive;
		
		private decimal _FlatRate;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostZoneIdChanging(int value);
    partial void OnPostZoneIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMultiplierChanging(decimal value);
    partial void OnMultiplierChanged();
    partial void OnAskIfMaxWeightChanging(bool value);
    partial void OnAskIfMaxWeightChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnFlatRateChanging(decimal value);
    partial void OnFlatRateChanged();
    #endregion
		
		public PostZone()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[Column(Storage="_PostZoneId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostZoneId
		{
			get
			{
				return this._PostZoneId;
			}
			set
			{
				if ((this._PostZoneId != value))
				{
					this.OnPostZoneIdChanging(value);
					this.SendPropertyChanging();
					this._PostZoneId = value;
					this.SendPropertyChanged("PostZoneId");
					this.OnPostZoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Decimal(18,4) NOT NULL")]
		public decimal Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[Column(Storage="_AskIfMaxWeight", DbType="Bit NOT NULL")]
		public bool AskIfMaxWeight
		{
			get
			{
				return this._AskIfMaxWeight;
			}
			set
			{
				if ((this._AskIfMaxWeight != value))
				{
					this.OnAskIfMaxWeightChanging(value);
					this.SendPropertyChanging();
					this._AskIfMaxWeight = value;
					this.SendPropertyChanged("AskIfMaxWeight");
					this.OnAskIfMaxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_FlatRate", DbType="Money NOT NULL")]
		public decimal FlatRate
		{
			get
			{
				return this._FlatRate;
			}
			set
			{
				if ((this._FlatRate != value))
				{
					this.OnFlatRateChanging(value);
					this.SendPropertyChanging();
					this._FlatRate = value;
					this.SendPropertyChanged("FlatRate");
					this.OnFlatRateChanged();
				}
			}
		}
		
		[Association(Name="PostZone_Country", Storage="_Countries", OtherKey="PostZoneId")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.PostZone = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.PostZone = null;
		}
	}
	
	[Table(Name="dbo.Size")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SizeId;
		
		private int _ProductId;
		
		private string _Name;
		
		private bool _IsInStock;
		
		private bool _IsActive;
		
		private EntitySet<BasketItem> _BasketItems;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsInStockChanging(bool value);
    partial void OnIsInStockChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Size()
		{
			this._BasketItems = new EntitySet<BasketItem>(new Action<BasketItem>(this.attach_BasketItems), new Action<BasketItem>(this.detach_BasketItems));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_SizeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsInStock", DbType="Bit NOT NULL")]
		public bool IsInStock
		{
			get
			{
				return this._IsInStock;
			}
			set
			{
				if ((this._IsInStock != value))
				{
					this.OnIsInStockChanging(value);
					this.SendPropertyChanging();
					this._IsInStock = value;
					this.SendPropertyChanged("IsInStock");
					this.OnIsInStockChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="Size_BasketItem", Storage="_BasketItems", OtherKey="SizeId")]
		public EntitySet<BasketItem> BasketItems
		{
			get
			{
				return this._BasketItems;
			}
			set
			{
				this._BasketItems.Assign(value);
			}
		}
		
		[Association(Name="Product_Size", Storage="_Product", ThisKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Sizes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Sizes.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasketItems(BasketItem entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_BasketItems(BasketItem entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private System.Nullable<int> _ParentId;
		
		private int _Position;
		
		private bool _IsActive;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="Category_Category", Storage="_Categories", OtherKey="ParentId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Products", OtherKey="CategoryId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.CategoryId;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.ContentType")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentTypeId;
		
		private string _Name;
		
		private EntitySet<Content> _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentTypeIdChanging(int value);
    partial void OnContentTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContentType()
		{
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			OnCreated();
		}
		
		[Column(Storage="_ContentTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContentTypeId
		{
			get
			{
				return this._ContentTypeId;
			}
			set
			{
				if ((this._ContentTypeId != value))
				{
					this.OnContentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeId = value;
					this.SendPropertyChanged("ContentTypeId");
					this.OnContentTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContentType_Content", Storage="_Contents", OtherKey="ContentTypeId")]
		public EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[Table(Name="dbo.Content")]
	[InheritanceMapping(Code="0", Type=typeof(Content))]
	[InheritanceMapping(Code="1", Type=typeof(Menu), IsDefault=true)]
	[InheritanceMapping(Code="2", Type=typeof(TextContent))]
	[InheritanceMapping(Code="3", Type=typeof(ActionContent))]
	[InheritanceMapping(Code="4", Type=typeof(TopContent))]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentId;
		
		private System.Nullable<int> _ParentContentId;
		
		private int _ContentTypeId;
		
		private string _Name;
		
		private string _UrlName;
		
		private int _Position;
		
		private bool _IsActive;
		
		private EntitySet<Content> _Contents;
		
		private EntityRef<Content> _Content1;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIdChanging(int value);
    partial void OnContentIdChanged();
    partial void OnParentContentIdChanging(System.Nullable<int> value);
    partial void OnParentContentIdChanged();
    partial void OnContentTypeIdChanging(int value);
    partial void OnContentTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Content()
		{
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			this._Content1 = default(EntityRef<Content>);
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[Column(Storage="_ContentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentId
		{
			get
			{
				return this._ContentId;
			}
			set
			{
				if ((this._ContentId != value))
				{
					this.OnContentIdChanging(value);
					this.SendPropertyChanging();
					this._ContentId = value;
					this.SendPropertyChanged("ContentId");
					this.OnContentIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentContentId", DbType="Int")]
		public System.Nullable<int> ParentContentId
		{
			get
			{
				return this._ParentContentId;
			}
			set
			{
				if ((this._ParentContentId != value))
				{
					if (this._Content1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentContentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentContentId = value;
					this.SendPropertyChanged("ParentContentId");
					this.OnParentContentIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContentTypeId", DbType="Int NOT NULL", IsDiscriminator=true)]
		public int ContentTypeId
		{
			get
			{
				return this._ContentTypeId;
			}
			set
			{
				if ((this._ContentTypeId != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeId = value;
					this.SendPropertyChanged("ContentTypeId");
					this.OnContentTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="Content_Content", Storage="_Contents", OtherKey="ParentContentId")]
		public EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		[Association(Name="Content_Content", Storage="_Content1", ThisKey="ParentContentId", IsForeignKey=true)]
		public Content Content1
		{
			get
			{
				return this._Content1.Entity;
			}
			set
			{
				Content previousValue = this._Content1.Entity;
				if (((previousValue != value) 
							|| (this._Content1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content1.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._Content1.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._ParentContentId = value.ContentId;
					}
					else
					{
						this._ParentContentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Content1");
				}
			}
		}
		
		[Association(Name="ContentType_Content", Storage="_ContentType", ThisKey="ContentTypeId", IsForeignKey=true)]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._ContentTypeId = value.ContentTypeId;
					}
					else
					{
						this._ContentTypeId = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Content1 = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Content1 = null;
		}
	}
	
	public partial class Menu : Content
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public Menu()
		{
			OnCreated();
		}
	}
	
	public partial class TextContent : Content
	{
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public TextContent()
		{
			OnCreated();
		}
		
		[Column(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
	}
	
	public partial class ActionContent : Content
	{
		
		private string _Controller;
		
		private string _Action;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControllerChanging(string value);
    partial void OnControllerChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    #endregion
		
		public ActionContent()
		{
			OnCreated();
		}
		
		[Column(Storage="_Controller", DbType="NVarChar(50)")]
		public string Controller
		{
			get
			{
				return this._Controller;
			}
			set
			{
				if ((this._Controller != value))
				{
					this.OnControllerChanging(value);
					this.SendPropertyChanging();
					this._Controller = value;
					this.SendPropertyChanged("Controller");
					this.OnControllerChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(50)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
	}
	
	public partial class TopContent : Content
	{
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public TopContent()
		{
			OnCreated();
		}
		
		[Column(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _CategoryId;
		
		private string _Name;
		
		private string _Description;
		
		private decimal _Price;
		
		private int _Position;
		
		private int _Weight;
		
		private bool _IsActive;
		
		private string _UrlName;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntitySet<Size> _Sizes;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    #endregion
		
		public Product()
		{
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._Sizes = new EntitySet<Size>(new Action<Size>(this.attach_Sizes), new Action<Size>(this.detach_Sizes));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UrlName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_ProductImages", OtherKey="ProductId")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[Association(Name="Product_Size", Storage="_Sizes", OtherKey="ProductId")]
		public EntitySet<Size> Sizes
		{
			get
			{
				return this._Sizes;
			}
			set
			{
				this._Sizes.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.Basket")]
	public partial class Basket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasketId;
		
		private int _UserId;
		
		private System.DateTime _OrderDate;
		
		private int _CountryId;
		
		private EntitySet<BasketItem> _BasketItems;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasketIdChanging(int value);
    partial void OnBasketIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    #endregion
		
		public Basket()
		{
			this._BasketItems = new EntitySet<BasketItem>(new Action<BasketItem>(this.attach_BasketItems), new Action<BasketItem>(this.detach_BasketItems));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Country = default(EntityRef<Country>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_BasketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasketId
		{
			get
			{
				return this._BasketId;
			}
			set
			{
				if ((this._BasketId != value))
				{
					this.OnBasketIdChanging(value);
					this.SendPropertyChanging();
					this._BasketId = value;
					this.SendPropertyChanged("BasketId");
					this.OnBasketIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Association(Name="Basket_BasketItem", Storage="_BasketItems", OtherKey="BasketId")]
		public EntitySet<BasketItem> BasketItems
		{
			get
			{
				return this._BasketItems;
			}
			set
			{
				this._BasketItems.Assign(value);
			}
		}
		
		[Association(Name="Basket_Order", Storage="_Orders", OtherKey="BasketId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Country_Basket", Storage="_Country", ThisKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Baskets.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Baskets.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="User_Basket", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Baskets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Baskets.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasketItems(BasketItem entity)
		{
			this.SendPropertyChanging();
			entity.Basket = this;
		}
		
		private void detach_BasketItems(BasketItem entity)
		{
			this.SendPropertyChanging();
			entity.Basket = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Basket = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Basket = null;
		}
	}
}
#pragma warning restore 1591
