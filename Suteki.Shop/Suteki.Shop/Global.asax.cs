using System;
using System.Web;
using System.Web.Routing;
using Castle.Windsor;
using Microsoft.Practices.ServiceLocation;
using MvcContrib.Castle;
using Suteki.Common;
using Suteki.Common.Repositories;
using Suteki.Shop.Routes;
using Suteki.Shop.Repositories;
using System.Web.Security;
using Suteki.Shop.XmlRpc;

namespace Suteki.Shop
{
    public class GlobalApplication : System.Web.HttpApplication, IContainerAccessor
    {
        private static IWindsorContainer container;

        public IWindsorContainer Container
        {
            get { return container; }
        }

        protected void Application_Start(object sender, EventArgs e)
        {
            RouteManager.RegisterRoutes(RouteTable.Routes);
            InitializeWindsor();
        }

        protected void Application_End(object sender, EventArgs e)
        {
            container.Dispose();
        }

        /// <summary>
        /// This web application uses the Castle Project's IoC container, Windsor see:
        /// http://www.castleproject.org/container/index.html
        /// </summary>
        protected virtual void InitializeWindsor()
        {
            if (container == null)
            {
                // create a new Windsor Container
				container = ContainerBuilder.Build("Configuration\\Windsor.config"); 

                WcfConfiguration.ConfigureContainer(container);

				ServiceLocator.SetLocatorProvider(() => container.Resolve<IServiceLocator>());
                // set the controller factory to the Windsor controller factory (in MVC Contrib)
                System.Web.Mvc.ControllerBuilder.Current.SetControllerFactory(new WindsorControllerFactory(container));
            }
        }

       /* /// <summary>
        /// We want to replace the IPriciple generated by the ASP.NET runtime with our
        /// own User instance. This allows us to control access by role anwhere in 
        /// our application.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Application_OnAuthenticateRequest(Object sender, EventArgs e)
        {
            if (Context.User != null)
            {
                if (Context.User.Identity.IsAuthenticated)
                {
                    string email = Context.User.Identity.Name;

                    IRepository<User> userRepository = container.Resolve<IRepository<User>>();
                    User user = userRepository.GetAll().WhereEmailIs(email);

                    if (user == null)
                    {
                        FormsAuthentication.SignOut();
                    }
                    else
                    {
                        System.Threading.Thread.CurrentPrincipal = Context.User = user;
                        return;
                    }
                }
            }

            System.Threading.Thread.CurrentPrincipal =
                Context.User = Suteki.Shop.User.Guest;
        }*/
    }
}