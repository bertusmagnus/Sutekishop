using System;
using System.Reflection;
using System.Web.Mvc;
using System.Web.Routing;
using Castle.Windsor;
using Castle.Windsor.Configuration.Interpreters;
using MvcContrib.Castle;
using MvcContrib.ControllerFactories;
using Suteki.Shop.Routes;
using Suteki.Shop.Repositories;
using Castle.MicroKernel.Registration;
using MvcContrib.ExtendedComponentController;

namespace Suteki.Shop
{
    public class GlobalApplication : System.Web.HttpApplication, IContainerAccessor
    {
        private static WindsorContainer container;

        public static IWindsorContainer Container
        {
            get { return container; }
        }

        IWindsorContainer IContainerAccessor.Container
        {
            get { return Container; }
        }

        protected void Application_Start(object sender, EventArgs e)
        {
            RouteManager.RegisterRoutes(RouteTable.Routes);
            InitializeWindsor();
        }

        /// <summary>
        /// This web application uses the Castle Project's IoC container, Windsor see:
        /// http://www.castleproject.org/container/index.html
        /// </summary>
        protected virtual void InitializeWindsor()
        {
            if (container == null)
            {
                // create a new Windsor Container
                container = new WindsorContainer(new XmlInterpreter("Configuration\\Windsor.config"));

                // automatically register controllers
                container.Register(AllTypes
                    .Of<Controller>()
                    .FromAssembly(Assembly.GetExecutingAssembly())
                    .Configure(c => c.LifeStyle.Transient.Named(c.Implementation.Name.ToLower())));

                // set the controller factory to the Windsor controller factory (in MVC Contrib)
                ControllerBuilder.Current.SetControllerFactory(typeof(WindsorControllerFactory));

                // automatically register component controllers
                container.Register(AllTypes
                    .Of<ComponentController>()
                    .FromAssembly(Assembly.GetExecutingAssembly())
                    .Configure(c => c.LifeStyle.Transient.Named(c.Implementation.Name.ToLower())));

                // set the component controller factory to the windsor container
                ComponentControllerBuilder.Current.SetComponentControllerFactory(
                    new IoCComponentControllerFactory(new WindsorDependencyResolver(container)));
            }
        }

        /// <summary>
        /// We want to replace the IPriciple generated by the ASP.NET runtime with our
        /// own User instance. This allows us to control access by role anwhere in 
        /// our application.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Application_OnAuthenticateRequest(Object sender, EventArgs e)
        {
            if (Context.User != null)
            {
                if (Context.User.Identity.IsAuthenticated)
                {
                    string email = Context.User.Identity.Name;

                    IRepository<User> userRepository = container.Resolve<IRepository<User>>();
                    User user = userRepository.GetAll().WhereEmailIs(email);

                    if (user == null)
                    {
                        throw new ApplicationException(string.Format(
                            "Context.User.Identity.Name: {0} is not a recognised user.",
                            Context.User.Identity.Name));
                    }

                    System.Threading.Thread.CurrentPrincipal = Context.User = user;

                    return;
                }
            }

            System.Threading.Thread.CurrentPrincipal =
                Context.User = Suteki.Shop.User.Guest;
        }
    }
}